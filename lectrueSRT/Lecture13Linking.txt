欢迎，很高兴见到大家

今天我们要转变一下研究内容

从程序如何与硬件交互，以及它们如何与特定系统软件中的软件交互开始

我们将通过研究和弄懂一个叫做链接的过程开始

这能帮助你好好弄清楚系统是如何构建你的程序

所以我们要学习链接的过程

然后我将向你展示一项非常酷的技术，称为「库打桩」技术

这允许你使用链接实际拦截像 C 标准库这样的库中的函数调用

所以它是一种非常强大而且有趣的技术，它通过链接实现

让我们从一个非常简单的程序开始吧

这个程序里包含两个模块 main.c 和 sum.c

sum.c 将一个数组和一个长度 n 作为参数

然后它计算了该数组中元素的总和并将总和返回给调用者

main.c 调用了 sum 函数

使用并传递一个两元素的 int 类型数组

然后返回了从其中收到的值

是的，我们认为像这样返回退出状态是件奇怪的事情

但我们这样做，以便编译器不会优化掉所有代码

让我们来看看如果我们想要编译那两个模块会发生什么

对于每个 main.c 和 sum.c

GCC 会在这些模块上调用 .c 文件上的一系列翻译器

首先调用 C 预处理器 cpp(将 main.c 翻译成 ASCII 中间文件 main.i)

然后它调用编译器，实际上使用的编译器是叫 cc1(将 main.i 翻译成 ASCII 汇编语言文件 main.s)

编译器生成汇编程序，然后汇编器将其翻译

结果生成了一个 .o 文件，称为 main.o

sum.c 也发生了类似的事情

在这三个翻译器处理完代码之后

生成了两个 .o 格式目标文件

链接器取到这些 .o 格式目标文件

将它们拼凑在一起，创建一个单个的可执行文件然后运行

然后放一些（必要的系统目标文件），将它们链接在一起，

然后我们就可以加载并运行到系统上

所以 main.c 和 sum.c 被称为源文件

这些 .o 文件

虽然是我们分开编译的目标文件

但我们还是要叫他们可重定位目标文件

因为它们可以组合在一起形成完全链接的可执行目标文件

那为什么我们这样做呢，你知道为什么我们允许这种所谓的分离编译

你知道为什么我们不喜欢一个包含所有代码的大文件

有一些原因，首先是模块化，允许你将代码分解成更小的部分

你可以将相关功能放入单独的源文件中

你可以定义函数库

所以这只是一种很好的技术，它可以让你将代码分解成很好的模块化的部分

另一个理由是效率

所以如果我们把我们的程序分为多个块

当我们改变，比如我们只需要更改其中一个块

我们就没必要重新编译所有其他模块

对，我们可以重新编译我们更改的一个模块，然后再将它们全部链接在一起

所以这在时间和空间上都是有效的

因为你可以使用 C 标准库中的所有功能，所以你可以将它们放在一起

但是，实际编译并链接到程序中的唯一函数是你实际调用的函数

好的，这样你就可以节省空间

你通常不知道你其实只使用 C 标准函数的一小部分

因此，如果你不需要将所有这些功能链接到代码中，那就没有意义了





好吧，那么链接器做了什么呢

链接器执行的主要任务有两个

第一个被称为简单解析（符号解析）

程序会定义和引用符号

好的，链接器称为符号，这些是全局变量和函数

在名称和那些对象中，它们被称为符号

第一行代码，我们在这里声明，我们正在定义一个名为 swap 的符号

中间这行我们称之为 swap，我们指的是那个符号

是的，这是对符号的一种引用

最后一行，我们定义了一个指向名为 xp 的 int 类型指针

所以我们定义了 xp ，将它初始化为取 x 的地址

这指的是，这是对 x 的引用

汇编器将符号定义存储在目标文件中

在这个符号表里面，全是一系列结构数组

每个结构数组里面包含有关该符号的信息

比如符号的名称，它的大小和位置等等信息

所以现在我们说符号解析的意思是在链接器链接过程中

链接器将每个符号引用与一个符号定义相关联

好的，所以这可能有多个

这中间可能会有些问题，比如在多个模块中

你可能会声明一个有相同名称的全局变量

链接器必须决定将其中的某个定义用于所有后续引用

一旦链接器和一个独一无二的目标建立联系

每个引用都会有一个唯一的符号定义

然后它执行第二步，即重定位

在重定位期间，它会将所有模块合并在一起

进入单个可执行目标模块后，就可以直接在系统上加载和执行

所以当它合并时

它必须弄清楚每个符号，每个函数和每个变量是要准备存储在哪

这称为重定位

因为最初的函数只是存储在其目标模块中的某个偏移处

正确，因为链接器不知道这些函数最终会被真正加载到内存中的哪个地方

所以在重定向前目标模块中的函数地址只是它在模块中的偏移量，对于数据也是如此

在重定位步骤期间，链接器会决定

当程序执行时，每个符号最终将位于 x 中的存储区中的哪里

并且它将那些绝对存储器位置绑定到符号

然后它会继续向下执行并查看所有对这些符号的引用

而且它们会更新那些引用，以便它们现在能指向正确的地址

好的，所以弄清楚原料要去哪里

对于每个定义，找出它要去的位置以及每个引用，然后更新该引用

所以它现在指向正确的位置

那么让我们来看看这些......这些步骤如何更详细地运作

在那之前我们需要定义一些东西

所以我提到了三种目标模块

.o 文件是可重定位目标模块，这是汇编器的输出

它不是一个二进制文件

但它不能以任何形式直接加载到内存中

在实际使用之前，需要由链接器对其进行操作

由链接器生成的可执行目标文件

这被称为 a.out 文件

在历史上第一个 Linux 操作系统就是可执行的

这是 Unix 开发人员使用的默认名称，其可执行文件的默认名称是 a.out

所以这只是一个历史原因所以它被称为 a.out

然后是另一种称为共享目标文件或 .so 文件的目标文件

这是一种用于创建共享库的现代技术

那个我们之后再了解，将在今天晚些时候再学习了解

现在，目标模块采用称为 ELF 格式的标准格式

它是可执行文件，.so 文件，.o 文件的统一格式

他们都使用一样的格式，一样的通用的格式

这就是这些 ELF 二进制文件

他们的二进制文件非常有条理

他们被分成几个部分

开头是一个头，它定义了（生成该文件系统的）字节顺序和字的大小

无论是 .o, .out 还是 .so

它只是提供了关于这个二进制文件的一般信息

然后就是所谓的节头部表

它只在可执行目标文件中定义

并指出代码的所有不同段在内存中的位置

那么你的栈在哪里，你的共享库去了哪里

你初始化数据和未初始化数据的位置在哪里

你的代码去了哪里

正确，因此所有这些不同的部分都在段头表中定义

然后是代码本身，出于某种神秘的历史原因它被称为 .text 部分

.text 一般是代码

然后是只读数据

比如 switch 语句中的跳转表

因此，文本 .text 和只读 .rodata 具有以下属性：它们都是只读的，你不会写入它们

然后是 .data 部分

它包含了所有初始化全局变量的空间

接下来是一个名为 .bss 的部分

它定义了未初始化的全局变量

这个节实际上并没有占用任何实际的空间，因为它们仅仅是未初始化的占位符

好的，但符号表中会有条目

在这个程序加载时会需要这些变量

在这个时候就必须为他们分配空间

.bss 是另一种神秘的名字，应对可以追溯到 60 年代

那时候 IBM 指令将其称为块符号

我认为理解它的意义最好的方式是 better save space (BSS) 的缩写

好的，如果在未初始化过程开始时有一个单独的节用于未初始化的变量，你可以这样理解

他们不必占用 .o 文件中的任何空间

好的接下来还有一个部分是针对符号表的

就像我之前说的那样它包含程序全局变量的结构数组

以及我们使用 static 属性定义的任何内容

并且这些符号中的每一个都在符号表中获得了一个条目

然后有两个部分称为包含重定位信息的部分，称为记录

当链接器去识别所有对符号的引用时，它就会记下一些记录

我不得不记住去安排对这个符号的引用

在我实际创建可执行文件时

所以重定向条目就像链接器一样

这是一个记录，汇编程序让链接器说「嘿」，你将不得不安排这个引用

因为我不知道这个符号在加载时实际存储在内存中的位置

好的，接下来是调试部分

它包含了将源代码中的行号与机器代码中的行号相关联的信息

好的，所以这叫做 .debug，这是你用-g编译时得到的

然后有一个节头表，告诉你所有这些不同部分的起始位置

现在我们说链接器有三种不同的符号

全局符号在一些模块 m 中定义

它们可以被其他模块使用

是的，所以我的意思是你注意到我们......如果我们有一个由多个模块组成的程序

然后我们将每个模块编译成一个 .o 文件

将调用由其他模块正确定义的未定义的函数

好吧那些，但是虽然编译器没有抛出错误

因为它假设那些是在其他模块中定义的

它假定链接器能够找到它们并确定地址

所以用任何全局变量或函数名定义的任何东西

只要没有静态属性的定义那就是一个全局符号

好的，然后外部符号就是其中的一种

外部符号是某些模块引用的符号

但在其他一些模块中定义

好吧，在这个小运行示例中

当 main.c 代码调用函数时，它就会引用了一个外部符号

好的，接下来我们介绍局部符号，这是在模块中定义和引用的符号

好的，那些是你创建的（程序里面的变量），它不同于局部变量

好的，你知道的，局部 C 程序变量的链接器是由堆栈上的编译器管理的

链接器它是不知道局部 C 程序的变量的

好的，在这种情况下当我们谈到一个局部符号

实际上我们讨论的是，一个全局变量或用 static 属性声明的函数

那玩意只能从该模块中引用它

所以我们说用 static 属性定义的函数或全局变量

其范围仅限于其定义的模块

好的，这就是在 C 语言里 ，这就是我们怎么进行抽象

以及这就是我们如何创建私有函数

并且是无法从该模块外部调用的私有函数

好的，例如，如果我们想在函数 C 中创建一个库，我们想要创建一个函数集合

其他程序可以将其称为链接到他们程序和调用

我们希望对其他程序可见的函数是在没有加上 static 属性定义的

我们希望只是对于内部而言的

我们声明 static 属性

这样我们就可以抽象，并将我们希望隐藏的信息隐藏

我们只展示我们想要公开的数据和功能

好的，接下来让我们详细了解符号解析步骤的工作原理

我们来拜访一下这个例子程序

这里我们引用了一个全局调用数组

这个在 main.c 中定义

在这里，我们定义了 main 函数

一个全局调用 main 函数

在这里，我们引用一个全局调用 sum 函数

它定义在 sum.c 中间

val 是堆栈上的局部 C 变量，链接器实际上对其没有任何了解

现在加载 i，s, 当然这两者也是局部变量

现在让我们确保我们理解了局部 static C 变量与本地非 static C 变量之间的区别

这里我们定义一个类型为 int 的局部静态变量

在这个函数 f 中

现在因为它是的局部，它的范围仅限于此功能

所以这个变量 x 只能在函数 f 中引用

类似于函数 g 中 x 的这个定义

只能被函数 g 引用

它是什么样的，但因为它是用静态属性声明的，所以它不存储在堆栈中

它实际上存储在 .data 文件中，就像全局变量一样

所以它就像一个实际上存储在 .data 而不是堆栈中的全局变量

但它就像一个局部 C 程序变量，因为它的范围仅限于它所定义的函数

好的，那么编译器会做什么呢，它将为每个 x 的定义分配空间

所以这样的话，它会给它赋予一些名称来消除它的歧义

所以也许它会称之为 x.1

也有可能叫 x.2

这些符号分配在在 .data 中，因为

因为它们已初始化并且像任何其他符号一样会获得符号表条目

好的，所以我在讲解符号解析期间说过

链接器和每个引用连接起来，每个符号引用与一个唯一的符号定义相关联

现在有一种情况，如果所有模块中有多个符号定义，它是如何做的呢

因此，要理解这种情况需要将把符号定义为强或弱

过程，函数名称或已初始化的全局变量是强符号

弱符号是未初始化的全局变量

好吧，所以这里的 int foo 是一个强有力的象征

因为它已初始化，我们正在初始化它。根据定义，p1 是强符号

p2.c 中的 foo 就是弱符号，这个定义的 foo 就是弱符号

因为它没有初始化，下面这个 p2 的定义的话就是强符号

好的，链接器使用的规则如下

不允许有多个强符号，以免出现错误

好的，这意味着如果我们在多个模块中，声明一个具有相同名称的函数

链接器将抛出一个不允许的错误

如果链接器总是选择强符号，则给出强符号和多个弱符号

现在记住我们是否初始化了一个同名的全局变量

如果我们在多个模块中声明一个同名的初始化的全局变量，那么我们就是一个错误

因为那些是强符号的第一条规则

但是如果我们有一个强符号和多个弱符号具有相同的名称

然后编译器将选择强符号

好的，它将所有对该符号的引用关联到该强符号

如果有多个弱符号同名，那么它会从这些弱符号中任意选择一个

这是我们将看到的，可能会有问题，现在你可以用这个名为 no common 的 GCC 标志覆盖

如果你用这个 no common 的参数声明函数

然后多个弱符号将在链接器中抛出错误

好吧，为什么我们关心所有这些东西呢

如果你不了解这些东西，你可能会遇到一些非常严重的问题

这些东西容易令人困惑和混淆

链接器错误就是最糟糕的那种

它们是最难调试的，因为人们通常不知道链接器的内部发生了什么

而且通常只有最好的程序员真的理解里面发生了什么

你知道这些链接器是如何工作的，它们可以抛出什么样的错误以及如何调试它们

那么让我向你展示一些这类错误的例子

好的，我们有一个程序

我们有两个模块，这里每个矩形窗口对应一个模块

我们在每个模块中定义 p1

这里有两个强符号，因此出现了错误

好的，现在我们已经定义了 p1 和 p2，这没有问题

但现在我们有两个弱符号，都是整数变量，称为 x

因此，如果这些模块引用 x，链接器将只选择其中一个作为定义

但这真的是你想要的结果吗

现在在这种情况下它并没有什么影响，因为 x 在两个模块中都被声明为 int

所以它只是一个整数大小的变量

它将在某个地方放着

但是链接器选择哪一个并不重要

但是如果我们用不同的类型声明这些弱符号，我们就遇到麻烦了

在这里，我们在一个模块中声明了一个 int x，在另一个模块中声明了一个 double x

当我们写入 x 时，如果链接器随意选择了这个，那么就使用此符号定义

这是长度为 8 的符号

如果我们在这个程序中的任何地方，如果链接器选择程序中的任意地方

那些对 x 的引用将是这个双字，这个双字

即使在这个模块中，如果我们引用 x，它也将是一个 8 字节的

所以它会覆盖 y

你有什么问题吗

[student speaking]

[学生在发言...]

噢它不完全是这样，它只是任意选择一个

而且你不知道

我的意思是

现在这是一个问题，我们已经定义了一个强符号x，因为我们已经初始化了

因此链接器将始终将对x的所有引用与此整数大小符号相关联

所以，如果我们写

哦是的，对于 x

这将是此模块中的两倍，但它将覆盖此模块中的 y

所以那真的很讨厌

在这我们正在定义一个强符号 x

因此，在第二个模块中对x的引用的结果将得到它将引用这个初始化的变量

所以它可能不是你想要的

你可能认为它在你的代码中未初始化

好吧，然后你得到了，最终的噩梦场景就是，假设...嗯

你知道，因为我们遵循标准的 ABI，我们可以用多个编译器编译我们的代码

这实际上发生在一些，嗯好的请你提问

[student speaking]

[学生在发言]

嗯是的你说的是对的

它仍然会优先考虑并且你将按数量编写

这是你想的，所以那个幻灯片上的不太正确

（学生）所以哦，是的，处理静态与非静态的重点是什么

（学生）如果它总是不断的在被本地引用，那么什么是宣布它时间的点

（学生）是不是该把他存储起来  （教授）不不不，不是的

如果引用变量，就会引用

你的意思是在模块中定义一个变量

然后你....用 static....对吗

噢，他们都是，他们都是局部的

因此，如果你想要保留两个值，请执行此操作

如果你想要该变量保留从调用到调用的值

所以假设你，这通常是一个坏主意，因为我们会在研究线程时看到

因为这将使你的代码线程不安全

但就像早期的随机数生成器一样

它会计算一个伪随机数

然后它会存储在一个静态变量里面

然后将其用作下次调用该函数时的起始值

因此，无论何时你都希望值能被允许进行跨越函数调用以减少静态

（学生）某些事情真的崩溃了

等一下让我...

让我直接写入 x 和 p2， 这实际上将和内存链接起来

看它实际上会进入内存位置，我很抱歉我需要修改它

因此，在 p2 中写入 x 将是 8 个字节

因为编译器，你知道编译器会知道它是双精度的

但它会进入一个只有 4 个字节的内存位置

因为 x...因为链接器选择了强符号

好的，正确的是 x 和 p2 实际上会覆盖 y

对不起...好的，有人有问题

[student speaking]

[学生发言]

它通常就是这样发生的

You know...[student speaking]

你知道...... [学生说话]

不不不全局变量进入了数据，他们并没有进栈

但通常来说，如果你在函数中定义局部变量

它会放置它们，它会将他们一个接一个地分配到栈上

好的，所有这些讨论

有关链接器具有的这些奇怪的强弱符号规则

这是避免全局变量的另一个原因

现在，如果你需要声明全局变量，请看看是否可以将其声明为 static

因为那样会限制了它声明的模块的范围

如果你那样做的话，是个好主意

如果你定义了一个全局变量，就把它初始化了

所以你会发现，你会发现你的代码中是否有多个具有相同名称的初始化全局符号

如果你想要，它总是好的做法

如果你正在引用外部变量，则通过使用 extern 属性告诉编译器

好的

所以现在，链接器已经将每个符号引用与一些简单的定义相关联

现在它必须获取所有这些对象可重定位目标文件并将它们组合在一起

并创建一个大的可执行文件

因此，假设我们拿一个小运行示例来举例

每个 main.o 和 sum.o 都包含了代码并初始化数据

sum.o 没有初始化数据，只有代码

然后是上面的系统代码，它实际上在你的程序之前和之后运行

程序运行时，它从 lib.c 开始执行启动代码

它主要做这一类初始化的事情，然后它做的最后一件事是它调用 main 并传递 rc 和 rv

好的，然后当你的程序退出时

会有一个调用，但如果你的程序...如果你的主函数例程返回

然后它返回到那个启动代码，然后没退出

这包括文本和数据

所以当链接器重定位这些目标文件时

它将所有代码都放在每个模块的文本部分中

并将它们连续地放在可执行对象文件的 .text 部分中

它只是按照它确定的顺序将它们组合在一起

它在可执行文件中创建了一个组合的 .text 部分

它包含所有系统代码和模块中定义的所有代码

然后它会对数据采用所有 .data 做同样的事情

来自各种目标文件的部分并将它们放在一起

在可执行文件中的一个组合的 .data 部分

它还会出现符号表和调试信息

现在当它起作用

重定向这些目标文件需要链接器

来弄清楚它们实际存储在哪里

当程序加载时，这些不同的符号...

所以它必须为 main 选择一个地址

以至于函数将从某个绝对地址开始

它会对 swap() 做同样的事情，以保证所有数组都是正确的

但问题是，当编译此代码时，编译器不知道链接器将选择哪些地址

因此，编译器会向称为重定位条目的链接器创建这些提醒

然后将其存储在目标文件的重定位部分中

这些重定位条目是链接器的指令

有一个符号的引用必须要修改

在代码实际重定位并合并到可执行文件中时

让我们看看其中的几个例子

我们在 main.c 模块中引用了一个名为 array 的全局符号

好的，然后还有一个引用，全局符号 sum， 这是一个函数

因此编译器会创建两个重定位条目

第一个用于引用数组 a

So here we're moving member %edi is the first argument

所以这里我们正在传送的成员 ％edi 是第一个参数

所以请记住 sum 函数获取数组的地址

输入数组作为其参数

So this move we're moving the address of the array into %edi for the first argument

因此，我们将第一个参数的数组地址传送到 ％edi 中

但编译器不知道该地址会是什么

是的，它只是...

It just moves in an immediate value of 0 into %edi temporarily right so you can see this is all zeros

它只是暂时把立即数值 $0x0 传送到 ％edi ，所以你可以看到这是全零

bf 是 mov 指令，然后后面全都是 0

然后它将此重定位条目放在 main.o 的重定位部分中

它在偏移量 a 处告知链接器

所以这些提醒你们这些是 main.o 模块

这个模块只包含一个函数

因此，该函数在模块的 .text 部分的模块的代码部分偏移为零的地方开始

如果此模块中还有其他功能，则会立即跟进

好的，所以你可以看到编译器只是生成这些指令的偏移量

从 .text 部分开始

它包括这个重定位条目，它跟链接器打招呼

当你重新定位 main.o 时，在此 .text 部分中添加偏移量 a

你有一个 32 位地址形式的数组引用

好的，那么，最终链接器将不得不修改它们

所以这是地址 a

它必须修改从地址 a 开始的四个字节

地址 a 使用符号数组的绝对地址

然后类似地引用这个函数的 sum

编译器不知道 sum 实际上会在哪里结束

即使 sum 是在模块中定义的，编译器甚至不知道它所在的模块，甚至它是什么模块

所以在这种情况下它只能用全零来调用

然后它添加了对链接器通告的重定位条目

在偏移量 f 处，你有一个四字节的 pc 相对引用，用于汇总调用 sum

然后，这有一个神奇的细节

可以选择在偏移中包含偏差

因为我们正在使用，因为调用总是使用 pc 相对寻址来解决

将在偏移 f 的四个字节处放置的值

Is going to be an offset from the current %rip value or program or counter value

将是当前 ％rip 值或程序或计数器值的偏移量

并且由于程序计数器总是指向嵌套获取下一条指令

它包括四个字节，它包括这个

这个偏移量减去四

所以如果你真的想知道它是如何工作的，我会在书中详细讨论它

但这里的重点是链接器有足够的信息来实际填充正确的地址

现在，如果我们查看重定位的 .text 部分

如果我们将此代码编译为可执行文件，然后我们使用 objdump 来反编译它

那么你看到的就是这里的引用

Where we move the address of the address of a into %edi

我们将该地址传送到 ％edi

这四个一开始为零的字节现在已经在运行时用内存中数组的实际地址更新

好的，所以链接器决定数组将会在地址 0x601018 处

然后它实际上修改了 mov 指令中该绝对地址中的四个字节

对 sum 的调用是......它也被更新了

这很有趣

所以用 pc 的相对地址为 5 来更新它的地址

好的，所以当这个程序运行时

调用指令

当它确定何时计算函数 sum 的绝对地址时它会做什么？

他将

它将采用程序计数器的当前值，即下一条指令 0x4004e3

它将增加它在这个区域的任何值

好的，这是一个二..把它解释为一个二进制补码整数，所以它可以

It can be relative you can go - or +

它可以是相对的，你可以去 - 或 +

In this case it's saying that the function that you want to call is at 0x4004e3 + 5

在这种情况下，它表示你要调用的函数是在 0x4004e3 + 5

就是 0x4004e8，这是 sum 的地址

好了，所以链接器做的是，编译器有这些智慧

编译器计算了重定位条目

链接器只是盲目地浏览每个重定位条目，只是按照它所说的去做

好的，但接下来的结果是，现在所有这些引用都已使用有效的绝对地址进行了修补

现在，一旦链接器创建了一个目标文件

该对象文件可以加载代码和数据

并且该对象文件可以直接加载到内存中而无需进一步修改

好的，如果你查看可执行文件中的所有只读部分

所以有这个 .init 部分

我们不用担心，所有代码都在 .text 中，跳转表之类的东西都在 .rodata 中

所有这些数据都可以直接加载到内存中

好的，所以这些字节可以直接复制到内存中

这形成了所谓的只读代码段

.data 和 .bss 部分中的数据也可以直接复制到内存中

在变量和 .data 的区域下，它们将被初始化为存储在符号表中的值

所以我们在这里画一个存储模型

This is the (memory) address space that every Linux program sees

这是每个 Linux 程序看到的（内存）地址空间

我们从 0 开始画地址，随着往上而增加

并且每个程序都加载到相同的地址 0x400000

因此代码直接来自目标文件，数据直接来自目标文件

然后是运行堆

这是由 malloc 创建和管理的

所以当你需要动态分配内存时

比如使用 malloc ，内存来自这个堆

它紧随数据段之后开始并向上发展

栈位于可见内存的最顶层，可供应用程序使用

上面的内存仅限于内核

好的，如果你尝试访问这些内存位置，你将收到段错误

然后我们知道的，堆栈会逐渐减少，这样就可以管理并创建一个运行时间

然后在栈和堆之间的这个巨大差距将会在某个地方存在这个区域

共享库有一个区域，因此 .so 文件都被加载到共享库的内存映射区域

现在堆的顶部由此全局变量指示

由内核维护，名为 break， brk

And the the top of the stack as we know is maintained by the general purpose register %rsp

我们所知道的堆栈顶部由通用寄存器 ％rsp 维护

现在有一点......这有点简化

如果你实际查看 malloc 返回的地址

实际上，实际上有两个堆

这上面有一个堆，并且在高速记忆中会逐渐减少

那用于大型目标，非常大

它会增长比如一大堆空间

增长的堆被保留用于较小的目标

所以我不确定他们为什么这样做

我认为它允许他们为大的目标和小的目标分别使用分配算法

好吧接下来，链接的一个真正优势是允许我们创建库

因此，作为程序员，我们总是希望做的某些事情......

我们总是希望创建抽象，然后将这些抽象呈现给用户

是的，我们通过创建定义 api 的库来实现

是

[student speaking]

[学生说话]

我认为这只是......不，不

实际上，这是一个很好的问题，我...我做过的实验里面它会不断增长，直到它在那里耗尽内存

所以我认为这不认为....那是个一个非常好的问题我的意思是我...

我做过那些实验，最终达到了一定的限度

是的我不知道，这是一个非常大的数字

但我知道作为程序员我们总是想抽象定义 api

实现打包这些 api 并将其提供给其他程序员

那么我们如何才能真正实现这一目标呢？我们如何将常用函数提供给其他程序员

鉴于我们迄今为止学到的东西，还有一件事

你可以把所有的功能都放在一个大的 C 文件中

如果他们想要正确使用它们然后程序员只要将 C 文件链接到他们的程序中

另一种选择是如果它是一个很大的库，可能会变得有点笨重

libc 有数百种功能

所以另一种选择可能是将每个函数放在一个单独的文件中

然后将它们一起编译并编译并将它们链接在一起

因此，这比第一个选项更节省空间和时间

但似乎这对程序员来说会很麻烦，因为

该程序必须知道所有这些函数的位置，并将它们放在 make 文件中

很多人都知道你最终可能会向 GCC 提供一个非常大的命令行

所以这个问题的一个解决方案是

Unix 开发人员提出的第一个解决方案

有些人称它为静态库

因此，你创建了此被称为 .a 文件归档的静态库的想法

这只是 .o 文件的集合，其中每个 .o 文件都包含一个函数

好的，所以你使用库中的所有函数，你使用选项二来创建一堆 .o 文件

然后你使用一个名为 archive 或 AR 的程序来获取那些 .o 文件

将它们放在一起，放在一个称为存档的大文件中

开始使用一个内容目录，告诉你每个 .o 文件的偏移量

好的，所以存档就是这个链接的 .o 文件集合

然后，你将链接传递给链接器

它只需要实际引用的 .o 文件并将它们链接到代码中

这是一个更有效的方式，你可以有一个巨大的档案

但是比如 libc，但是如果你只调用 printf

你得到的唯一 .o 文件是 printf.o

好的，这样做的方式是

和以前采取的方式一样

我们将我们想要的所有函数放在库中

我们通过翻译器运行它们来获取 .o 文件

我们将这些文件传递给归档器以获取归档文件

所以在种情况下 libc.a

可能有 printf 代码，我们想使用

是的，所以我们可以随时重新创建该档案

因此，如果其中一个函数发生变化，比如说 printf 更改

你只需重新存档....重新编译 printf，然后重新存档所有 .o 文件

在 libc 中它大约有 1500 个目标文件

它存档的东西，比如 printf，scanf，简单的整数数学，还有一个数学库

你知道几百种常见功能

比如浮点数学 sin，cos，tan 等

这些库的惯例是，库总是以 lib 为前缀，然后

然后对它的作用进行了一些额外暗示

现在让我们看看如何与这些静态库链接起作用

所以我在这里创建了一个小例子

我创建了一个名为 libvector.a 的库

它由操纵向量的函数组成

这是一个真正简单只是加的库

这里有一个函数可以将两个向量 x 和 y 相加并在 z 中返回结果

然后是另一个类似的函数，它将对两个向量进行成对乘法

x[i]*y[i] equals z[i]

x [i] * y [i] 等于 z [i]

现在我编译这两个程序并打包，我想将它们打包成一个名为 libvector.a 的存档

然后在我的主程序中，我将调用其中一个函数 addvec

将这两个向量 x 和 y 加在一起

那么现在当我们编译这个程序时会发生什么

我们已经从 addvec.o 和 multvec.o 构建了存档 libc.a

我们将该存档与 main.o 可重定位目标文件一起传递给链接器

我们也将它传递给 libc.a

其定义包含 printf.o

剩下的就是调用 printf.o

所以这三个链接器检测到 addvec 函数 addvec 的引用

所以它只是将 addvec.o 拉出来并忽略其余部分，类似于 printf.o

然后它编译所有这些

主要的 main.o addvec.o 和 printf.o 一起进入这个完全链接的可执行文件

称为 prog2c 编译时间

所以我们这样做，我们正在做这个链接，我们在编译时这样做这个链接

当我们调用 GCC 时

现在链接器在使用静态库时会做什么

它在命令行上按顺序扫描所有 .o 文件和 .a 文件

因此，你只需键入 GCC，然后按某种顺序键入 .o 文件和 .a 文件列表

因此，在扫描期间，它会保留当前未解析的引用列表

如果我们说它首先会看看 main.o 有一个对 printf 的引用

这是一个未解析的引用，因为 printf 未在 main.o 中定义

所以这是一个未定义的引用列表

在某些时候，每个新的 .o 文件或 .a 文件会冲突

链接器尝试使用该 .o 文件或 .a 文件中定义的符号但不包含引用列表

然后，如果在扫描结束时列表中有任何条目，那么就会出错

好的，这里的关键是链接器将尝试在命令行上从左到右解析这些引用

因此，作为程序员，这是另一种重要的事情

因为你将文件放在命令行上的顺序实际上有所不同

好的，如果你使用错误的顺序，你可能会遇到一些奇怪的令人困惑的链接器错误

所以比如假设我们有

一个函数，一个名为 libtest 的对象模块

它调用了一个在 lmine.a 中定义的函数

好的，所以这些 -L，-L 要求查找，以查找当前目录中的库文件

这就是查找的点，然后查找你看起来正常的地方

而 -l 就像是一个缩写

我们可以用完全拼写的 lmind.a 替换它

好的，但是你会看到这个 -l 我经常使用它

libtest 调用了在 lmind.a 中声明的函数

因此，链接器会查看 libtest.o 中未解析的符号

并且它检测到这个未解析的函数，我们称它为 foo

I know its， it's called libfun

我知道它，叫做 libfun

所以它把它放在列表上然后继续下一个命令行条目，也就是 lmine.a

在那里，它发现它找到了 libfun 的这个符号

并且它将对 libfun 的引用解析为重定位地址的实际地址

现在，如果我们切换顺序，我们首先将 lmine.a 放在 libtest.o 之前

那么这个库中就没有未解析的引用

对，它只是函数定义的集合

因此它没有未解析的引用，因此链接器会发现这一切都很好

然后它查看 libtest.o，现在 libfun 有未解析的引用

但是我们已经到了命令行的末尾

所以就有了一个链接器错误

所以你获取了这个神秘的错误信息

如果你不了解此顺序规则，你将不知道如何调试

没关系，静态库是一种老式的解决方案

现代解决方案是使用动态库或共享库

这种新型库的存在是有原因的

静态库有一些缺点

所以如果你用静态库编译的话

然后每个使用 printf 的函数

使用 printf 的那个或每个程序都必须有 printf 的副本

好的，但几乎每个程序都使用 printf

共享库允许提供一个机制，这种机制使得其只能有一个

只能有一个像 printf 这样的共享库成员的实例

并且系统上运行的每个程序都将共享该副本

那种潜在的重复是一个很大的缺点

共享库的意义是不同的

他们包含链接并加载进程序的代码和数据

现在是编译和链接到可执行目标文件时

但实际上当程序加载到系统中时

对共享库对象的引用的链接延迟了

直到程序实际加载到内存中

直到可执行目标文件实际加载到内存中

这也可以，甚至可能发生

它可能在程序实际加载到内存时发生，但也可以在运行时随时在运行时发生

所以你可以...你可以运行一个程序

并且该程序可以任意决定加载在共享库中声明的函数

好的，我会告诉你它真的很酷

现在这些东西经常被称为共享库

它们被称为动态链接库，比如在 windows 中，它们被称为 dll

.so 文件，他们都引用了相同的东西

好吧这就像我说的那样......

动态链接可以在程序加载时或在加载后实际运行时发生

并且存在这样一个了不起的事，共享库例程可以由多个进程共享

当我们学习到虚拟内存时，我们就会发现这是有意义的

所以现在不要担心

这就是流程如何工作的图

所以我们首先要创建而不是创建存档

我们创建一个共享库，我们的 libvector 程序

我们创建一个共享的 .so 文件，而不是创建存档文件

使用 GCC 的共享参数

因此我们将两个输入函数作为 addvec 和 multvec

并告诉它说要创建，我们告诉 GCC 创建一个共享库并将其放在 libvector.so 中

好的，还有 C 开发人员创建了一个名为 libc.so 的共享库

它包含 printf 和其他标准库函数

所以我们采用我们的程序 main2 ，这是调用 addvec 的相同程序

我们将它编译成 main2.o

我们将 main2.o 和这些 .so 文件传递给链接器

现在链接器在实际上并没有真的复制我们将要使用的 addvec 或 printf

它实际上并不复制这些函数或在可执行文件中对它们执行任何操作

它只是在符号表中记下一笔

加载程序时需要解析对这些函数的引用

好吧，它放入一个重定位条目，说明在加载程序时解决这个问题

所以它是部分链接的，但它并没有完全链接起来

你不能获取那个，你不能获取一个程序，你不能获取一个可执行文件

这就是动态链接和直接加载

你所做的是作为 execve 系统调用的加载器

我们将更多地了解它，但这只是一个 sys 调用，它将可执行文件加载到内存中并运行它们

加载器获取可执行文件

然后它需要共享的 .so 文件

当链接器还记录了它需要哪个 .so 文件时，这个程序还需要 k

所以加载器调用动态链接器，它接受那些 .so 文件

然后实际解析任何未解析的引用上的所有引用

好的，所以 addvec 的地址，addvec 和 printf 函数在程序加载之前是不确定的

由此，在加载程序之前，动态链接器不会确定它

因此，动态链接器会执行与静态链接器类似的过程

修复引用以加回对 printf 的引用

然后在那时，二进制文件的形式可以直接执行

你有问题？ - 是 -------

好的问题是如果使用 include 了一个文件会发生什么

includes 是由 C 预处理器处理

因此，当链接器到达它时，它们已经处理过了

Okay so the C preprocessor just takes #define,#include

好的，所以 C 预处理器只需要 #define，#include

并解释这些并输出另一个 C 程序

因此，如果你 include 一个文件， C 预处理器只需要获取该文件并将其扩展

输出 C 程序包含你 include 它的所有文件的扩展版本

好的，现在真正酷的是你也可以在运行时进行动态链接

所以我要向你展示加载时候发生了什么

但你也可以随意决定加载链接并从 .so 文件中定义的任何共享函数中调用函数

你这样做的方法是有一个名为 dlopen 的接口

这是在 lib.c 中允许你这样做

所以，我们希望这是我们的主程序，就像我们之前想要调用 addvec 的那样

好的，但现在 addvec 是在 .so 文件中定义的

我们之前生成的完全相同的 .so 文件

当我们编译时，所以当我们编译这个程序 dll.c 时，我们将调用这个 dll.c

我们不知道它会从 lib.so 调用一个函数

我们只是编译它就像是编译一个独立的 C 程序

虽然我们在这个程序中声明了一个名为 addvec 的函数指针

我们给出了这个函数的原型

它是指针，它有两个输入数组，还有的关于规模的输出数组

然后我们首先动态加载包含我们想要的函数的共享库

然后我们调用 dlopen，然后我们说把这个 .so 文件加载到内存中

这样我就可以调用一个函数了

但是不要解析.....不要担心解析函数引用，直到告诉你要去才去

那是 LAZY 的部分

那么这个处理返回了一个 handle

然后用在随后的调用中

如果 handle 为空，就会出现某种错误，例如这个 .so 文件并不存在

所以一旦我们打开那个 .so 文件，我们就会使用带有 handle 参数的 dlsym 函数

然后我们给它，因为我们传递一个字符串作为我们想要调用的函数的名称

我们得到从 dlsym 返回参数作为指向该函数的指针

然后我们可以像任何其他函数一样使用该函数，因此我们可以使用该函数指针

我们称之为静态定义函数

所以你可以看到这是一个非常强大的技术

好吧看起来让我们完成课程的最后一点

我想告诉你它试图说服你，链接实际上是有趣的，好像是在硬形推销一样

好的问题......是的......不

不，你只是声明它是一个函数指针

然后你就可以使用你没有的函数名称来取消引用它

或者你只是在调用它，你只需使用该函数指针名称即可调用该函数

就像我一样

如果你取消引用它我只是得到一个指针值

你得到那个函数返回的地址

好吧，硬性推销给你们说链接很有意思感觉很难

但是我要试试

好的，有一种强大的技术称为库打桩

目标是截获来自库的函数调用

以及出于某种原因截获它们后做一些事情

我们通常想要做的就是截获一个函数调用

也许记录一些统计数据或做一些错误检查

然后按预期调用实际函数

对，所以我们的想法是创建包装函数

当一个程序调用一个函数的程序时，我们要做的就是执行它的包装函数

好的，我们将在不改变任何源的情况下这样做

现在有很多原因这样做，有很多应用程序

我知道的最棒的是 facebook 工程师做过的

他们正试图在 Facebook 的 iPhone 应用程序中解决一个长达一年的错误

没有人能弄明白发生了什么

他们使用库间定位来解决这个问题

他们发现网络栈中有东西写错了位置

他们通过拦截来自他们的 Facebook 应用程序的所有权限来解决这个问题

然后做一些处理比如写入权限

他们只是拦截了所有这些电话，然后他们就可以

当他们查看参数以及如何调用这些函数时

他们决定

你也可以使用它进行监视和分析

因此，如果你想知道调用不同函数的次数，你可以设置

我们用它来生成地址追踪

所以当你在学期后期做 malloc 实验时

你将使用追踪程序评估你的 malloc

这种追踪程序是从使用了库打桩技术的真实程序中生成的

我们插入所有 malloc 和free 调用，比如 netscape

然后我们只记录了地址和大小

Malloc 返回后，free 块释放了

我们刚刚创建了那些追踪程序，然后，让我告诉你如何做到这一点

所以有个主意，这里有一个主程序

我们的想法是跟踪所有 malloc 和 free 调用

所以这里有一个 malloc 调用，以及下面调用了 free

我们想知道这些地址是什么，我们想知道这些大小是什么

所以我们可以在编译时，链接时或运行时执行库打桩操作

在编译时执行此操作

我们首先编写名为 mymalloc 和 myfree 的包装函数

Where mymalloc calls the __real_malloc function

mymalloc 能在相应的位置调用 __real_malloc 函数

然后它打印出它它调用的大小和 malloc 返回的地址

好的，所以当我们运行程序时，它会打印出这些所有这些地址

并且它免费做同样的事情

然后是 malloc.h 中的技巧

我们将 malloc 定义为 mymalloc，好的，并且把 free 定义为 myfree

然后我们给它原型，这样编译器就不会混淆了

然后我们可以将 mymalloc.c 编译成 .o 文件

然后我们调用....然后我们完成我们调用程序

这是我们用于库打桩的主要程序 int.c

我们调用它，这里有个诀窍

我们用 -I 参数调用它

它的意思是在当前目录中查找任何 include 文件

好的，这与 -L 参数类似

但是因为我们告诉 GCC 要先查看当前目录

这可以说就是库打桩发生的地方

这是因为当它这样做时，它会找到一个

它将找到一个名为 malloc.h 的库

我的意思是 .h 文件叫做 malloc.h

所以对 malloc 的所有调用都将由 C 预处理器转换为 mymalloc

因此，当我们运行它时，它打印出 malloc 和 free 的跟踪信息

现在我们也可以在链接时执行此操作

所以我们可以告诉 C，为了做到这一点，我们必须访问

我们必须编译程序，我们不必更改它，但我们必须编译它

如果要避免编译，我们可以在定位时使用链接时间

So the way this works we define our wrapper functions with this special name __wrap_malloc

因此，我们使用这个特殊名称 __wrap_malloc 来定义我们的包装函数

And this calls the __real_malloc function and then prints out the information

这会调用 __real_malloc 函数，然后打印出信息

然后在链接时，我们通过使用这个特殊的 -Wl 参数调用链接器来进行打桩

那么 GCC 的 -Wl 标志是什么呢

接下来的参数后面用逗号替换所有空格

然后使用此参数调用链接器

好的，我们正在做的是将链接器参数传递给链接器

这是链接器的 --wrap 参数

It tells the linker to resolve all references to malloc as __wrap_malloc

它告诉链接器将对 malloc 的所有引用解析为 __wrap_malloc

And all references to __real_malloc - should be resolved as malloc

并且对 __real_malloc 的所有引用  - 应该被解析为 malloc

Okay so anywhere in the program what we call malloc it'll be resolved to underscore __wrap_malloc

好的，在我们程序中的任何地方调用 malloc ，它都将被解析为 __wrap_malloc

And it will invoke our wrapper and then the wrapper calls __real_malloc

它将调用我们的包装器，然后包装器调用 __real_malloc

因为这个标志解析了实际的 malloc 例程

真正令人惊讶的是接下来的

你也可以在加载程序时进行打桩到加载计时器和运行时间

因此，你甚至不需要访问 .o 文件，只需访问可执行文件即可

我们有权访问可执行文件的每个程序

所以想想我们可以使用任何程序

我们可以在运行时插入其库调用

所以我们这样做的原因是我们编写包装函数使用了我们之前看到的 dlsym 调用

我们用这个特殊的函数调用它，这个特殊的参数叫做 next

我们说的是 real malloc 的地址

好的，我们将欺骗链接器首先查看 malloc 的实现

但是在这里我们想要真正的那个，所以我们告诉它要去下一个地方，它通常看起来的下一个地方

并获取 malloc 的地址

所以结果是一个指针叫做 mallocp 的函数指针

然后我们可以调用该函数来调用 libc malloc

然后打印出数据

好的，我们对 free 做同样的事情，我们以完全相同的方式对 free 使用 dlsym

然后，当程序加载时，就会发生打桩

所以请注意，我们构建了我们的主程序 intr ，用于运行时打桩

我们建立了，很抱歉我们使用共享参数创建了我们的 .so 文件 mymalloc.so

然后我们将 int.c 编译成这个名为 intr 的可执行文件

但请注意，在任何地方都没有提到 mymalloc

现在，当我们实际运行程序时，打桩就会发生

我们这样做，我们通过将一个名为 ld-preload 的环境变量设置为 mymalloc.so 来影响打桩

这是一个告诉动态链接器的环境变量

首先会搜索值， ld-preload 的值是一个位置列表

首先查看这些位置何时解析引用

只有在以后查看正常系统的地方

所以我们首先要查看 mymalloc.so 里未解析的引用

然后我们正在调用，所以这是在 bash 中这是初始化环境变量的方式

所以我们将它初始化为 mymalloc.so 然后我们将加载并运行该程序

所以对 malloc 的所有引用都变成了对包装函数的引用

我们在程序中定义的 malloc 函数没问题

好的就是这样，这样的定位是一种非常酷的技术

而且只有因为链接器才有可能

好的，我们星期四见，祝你的 cache lab 好运
